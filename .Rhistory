# large_dataset_script.R
library(data.table)
# large_dataset_script.R
library(data.table)
# Assume 'large_dataset.csv' is a large file
input_file <- "large_dataset.csv"
output_file <- "processed_dataset.csv"
# Read the large dataset
dt <- fread(input_file)
# large_dataset_script.R
library(data.table)
# Assume 'large_dataset.csv' is a large file
input_file <- "large_dataset.csv"
output_file <- "processed_dataset.csv"
# Read the large dataset
dt <- fread(input_file)
# Example operation: Filtering and aggregating data
processed_dt <- dt[variable1 > threshold, .(Mean = mean(variable2)), by = .(groupVariable)]
# large_dataset_script.R
library(data.table)
# Assume 'large_dataset.csv' is a large file
input_file <- "large_dataset.csv"
output_file <- "processed_dataset.csv"
# Read the large dataset
dt <- fread(input_file)
# Example operation: Filtering and aggregating data
processed_dt <- dt[variable1 > threshold, .(Mean = mean(variable2)), by = .(groupVariable)]
# Write the processed data to a file
fwrite(processed_dt, output_file)
View(dt)
colnames(dt)
# large_dataset_script.R
library(data.table)
# Assume 'large_dataset.csv' is a large file
input_file <- "large_dataset.csv"
output_file <- "processed_dataset.csv"
# Read the large dataset
dt <- fread(input_file)
# Example operation: Filtering and aggregating data
threshold = 10000  # Set your threshold value
processed_dt <- dt[Value > threshold, .(Mean = mean(Value)), by = .(Variable_name)]
# Assume 'large_dataset.csv' is a large file
input_file <- "large_dataset.csv"
output_file <- "processed_dataset.csv"
# Read the large dataset
dt <- fread(input_file)
# Example operation: Filtering and aggregating data
dt[, Value := as.numeric(Value)]
threshold = 10000  # Set your threshold value
processed_dt <- dt[Value > threshold, .(Mean = mean(Value)), by = .(Variable_name)]
# Write the processed data to a file
fwrite(processed_dt, output_file)
View(processed_dt)
View(processed_dt)
View(dt)
View(processed_dt)
View(processed_dt)
View(dt)
args <- commandArgs(trailingOnly = TRUE)
n <- as.integer(args[1])
fibonacci <- function(n) {
if (n <= 0) {
return(NULL)
} else if (n == 1) {
return(0)
} else if (n == 2) {
return(1)
} else {
return(fibonacci(n - 1) + fibonacci(n - 2))
}
}
print_fibonacci_sequence <- function(n, file) {
if (n <= 0) {
cat("Invalid input. Please enter a positive integer.\n", file=file)
return()
}
cat("Fibonacci Sequence:", file=file)
for (i in 1:n) {
cat(" ", fibonacci(i), file=file)
}
cat("\n", file=file)
}
output_file <- "fibonacci_sequence.txt"  # Output file name
print_fibonacci_sequence(n, output_file)
args <- commandArgs(trailingOnly = TRUE)
n <- as.integer(args[1])
fibonacci <- function(n) {
if (n <= 0) {
return(NULL)
} else if (n == 1) {
return(0)
} else if (n == 2) {
return(1)
} else {
return(fibonacci(n - 1) + fibonacci(n - 2))
}
}
print_fibonacci_sequence <- function(n, file) {
if (n <= 0) {
cat("Invalid input. Please enter a positive integer.\n", file=file)
return()
}
cat("Fibonacci Sequence:", file=file)
for (i in 1:n) {
cat(" ", fibonacci(i), file=file)
}
cat("\n", file=file)
}
output_file <- "fibonacci_sequence.txt"  # Output file name
print_fibonacci_sequence(n, output_file)
View(fibonacci)
View(print_fibonacci_sequence)
# Function to calculate mode
get_mode <- function(v) {
uniq_v <- unique(v)
uniq_v[which.max(tabulate(match(v, uniq_v)))]
}
# Generate a list of random numbers
set.seed(123)  # Set seed for reproducibility
numbers <- runif(100, 1, 100)  # 100 random numbers between 1 and 100
# Calculate statistics
mean_val <- mean(numbers)
variance_val <- var(numbers)
mode_val <- get_mode(numbers)
sum_val <- sum(numbers)
# Prepare output
output <- paste(
"Mean: ", mean_val, "\n",
"Variance: ", variance_val, "\n",
"Mode: ", mode_val, "\n",
"Sum: ", sum_val, "\n",
sep = ""
)
# Write output to a file
write(output, file = "statistics_results.txt")
# Function to calculate mode
get_mode <- function(v) {
uniq_v <- unique(v)
uniq_v[which.max(tabulate(match(v, uniq_v)))]
}
View(processed_dt)
# Function to calculate mode
get_mode <- function(v) {
uniq_v <- unique(v)
uniq_v[which.max(tabulate(match(v, uniq_v)))]
}
# Generate a list of random numbers
set.seed(123)  # Set seed for reproducibility
numbers <- runif(100, 1, 100)  # 100 random numbers between 1 and 100
# Calculate statistics
mean_val <- mean(numbers)
variance_val <- var(numbers)
mode_val <- get_mode(numbers)
sum_val <- sum(numbers)
# Prepare output
output <- paste(
"Mean: ", mean_val, "\n",
"Variance: ", variance_val, "\n",
"Mode: ", mode_val, "\n",
"Sum: ", sum_val, "\n",
sep = ""
)
# Write output to a file
write(output, file = "statistics_results.txt")
